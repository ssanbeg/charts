---
clusterAdminEnabled: true
jenkins:
  rbac:
    readSecrets: true
  agent:
    componentName: "agent"
  networkPolicy:
    internalAgents:
      allowed: true
      namespaceLabels:
        name: "jenkins-infra"
  controller:
    resources:
      limits:
        cpu: "2"
        memory: "4Gi"
      requests:
        cpu: "2"
        memory: "4Gi"
    javaOpts: >
      -XshowSettings:vm -XX:+UseStringDeduplication -XX:+ParallelRefProcEnabled -XX:+DisableExplicitGC -XX:MaxRAM=4g -XX:+AlwaysPreTouch
      -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/tmp/ -XX:+UseG1GC
      -Dorg.csanchez.jenkins.plugins.kubernetes.pipeline.ContainerExecDecorator.websocketConnectionTimeout=60
    JCasC:
      enabled: true
      defaultConfig: false
      configScripts:
        credentials: |
          credentials:
            system:
              domainCredentials:
                - credentials:
                  - gitHubApp:
                      appID: "${GITHUB_APP_ID}"
                      description: "GitHub App for infra.ci.jenkins.io"
                      id: "github-app-infra"
                      privateKey: "${GITHUB_APP_PRIVATE_KEY}"
                  - usernamePassword:
                      description: "GitHub access token for jenkinsadmin"
                      id: "github-access-token"
                      username: "${GITHUB_USERNAME}"
                      password: "${GITHUB_PASSWORD}"
                      scope: GLOBAL
                  - string:
                      scope: GLOBAL
                      id: "updatecli-github-token"
                      secret: '${UPDATECLI_GITHUB_TOKEN}'
                      description: Github Token used by updatecli to update version
                  - string:
                      scope: GLOBAL
                      id: "sops-client-id"
                      secret: "${SOPS_CLIENT_ID}"
                      description: Azure client ID used by sops to decrypt secrets
                  - string:
                      scope: GLOBAL
                      id: "sops-client-secret"
                      secret: "${SOPS_CLIENT_SECRET}"
                      description: Azure client secret used by sops to decrypt secrets
                  - string:
                      scope: GLOBAL
                      id: "PLUGINSITE_STORAGEACCOUNTKEY"
                      secret: "${PLUGINSITE_STORAGEACCOUNTKEY}"
                      description: Azure storage account key for plugin site
                  - string:
                      scope: GLOBAL
                      id: "sops-tenant-id"
                      secret: "${SOPS_TENANT_ID}"
                      description: Azure tenant id used by sops to decrypt secrets
                  - basicSSHUserPrivateKey:
                      scope: GLOBAL
                      id: "charts-secrets"
                      username: ${SSH_CHARTS_SECRETS_USERNAME}
                      #passphrase: ${SSH_CHARTS_SECRETS_PASSWORD}
                      description: "SSH privkey used to access jenkins-infra/charts-secrets"
                      privateKeySource:
                        directEntry:
                          privateKey: ${SSH_CHARTS_SECRETS_PRIVKEY}
                  - usernamePassword:
                      scope: GLOBAL
                      description: Docker hub credential for jenkinsinfra organisation
                      id: jenkins-dockerhub
                      username: "${DOCKER_HUB_USERNAME}"
                      password: "${DOCKER_HUB_TOKEN}"
                  - string:
                      scope: GLOBAL
                      id: "algolia-plugins-app-id"
                      secret: "${ALGOLIA_PLUGINS_JENKINS_IO_APP_ID}"
                      description: Algolia app id for plugin site
                  - string:
                      scope: GLOBAL
                      id: "algolia-plugins-search-key"
                      secret: "${ALGOLIA_PLUGINS_JENKINS_IO_SEARCH_KEY}"
                      description: Algolia credentials to read data for plugin site (runtime)
                  - string:
                      scope: GLOBAL
                      id: "algolia-plugins-write-key"
                      secret: "${ALGOLIA_PLUGINS_JENKINS_IO_WRITE_KEY}"
                      description: Algolia credentials to write data for plugin site
                  - string:
                      scope: GLOBAL
                      id: "ci-terraform-access-key"
                      secret: "${CI_TERRAFORM_AWS_ACCESS_KEY_ID}"
                      description: AWS access key id for the account 'ci-terraform'
                  - string:
                      scope: GLOBAL
                      id: "ci-terraform-secret-key"
                      secret: "${CI_TERRAFORM_AWS_SECRET_ACCESS_KEY}"
                      description: AWS secret key for the account 'ci-terraform'
                  - file:
                      fileName: "backend-config"
                      id: "ci-terraform-backend-config"
                      scope: GLOBAL
                      secretBytes: "${base64:${CI_TERRAFORM_BACKEND_CONFIG}}"
                  - string:
                      scope: GLOBAL
                      id: "production-terraform-access-key"
                      secret: "${PRODUCTION_TERRAFORM_AWS_ACCESS_KEY_ID}"
                      description: AWS access key id for the account 'production-terraform'
                  - string:
                      scope: GLOBAL
                      id: "production-terraform-secret-key"
                      secret: "${PRODUCTION_TERRAFORM_AWS_SECRET_ACCESS_KEY}"
                      description: AWS secret key for the account 'production-terraform'
                  - file:
                      fileName: "backend-config"
                      id: "production-terraform-backend-config"
                      scope: GLOBAL
                      secretBytes: "${base64:${PRODUCTION_TERRAFORM_BACKEND_CONFIG}}"
                  - file:
                      fileName: "kubeconfig"
                      id: "k8s_kubeconfig"
                      scope: GLOBAL
                      secretBytes: "${base64:${KUBECONFIG}}"
                  - file:
                      fileName: "credentials"
                      id: "eks_charter_awsconfig"
                      scope: GLOBAL
                      secretBytes: "${base64:${EKS_CHARTER_AWSCONFIG}}"
                  - basicSSHUserPrivateKey:
                      scope: SYSTEM
                      id: "ec2-agents-privkey"
                      username: "key"
                      description: "SSH privkey used to connect to EC2 agents"
                      privateKeySource:
                        directEntry:
                          privateKey: "${EC2_AGENTS_PRIVKEY}"
                  - aws:
                      accessKey: "${EC2_AWS_ACCESS_KEY_ID}"
                      description: "This credential is used to provision dynamic agents on AWS EC2"
                      id: "ec2-agents-credentials"
                      scope: SYSTEM
                      secretKey: "${EC2_AWS_SECRET_ACCESS_KEY}"
        agent-settings: |
          jenkins:
            clouds:
              - kubernetes:
                  containerCapStr: "100"
                  jenkinsUrl: "http://jenkins-infra:8080"
                  maxRequestsPerHostStr: "300"
                  webSocket: true
                  name: "kubernetes"
                  namespace: "jenkins-infra"
                  podRetention: "Never"
                  serverUrl: "https://kubernetes.default"
                  podLabels:
                    # Required to be jenkins/<helm-release>-jenkins-slave as definede here
                    # https://github.com/helm/charts/blob/ef0d749132ecfa61b2ea47ccacafeaf5cf1d3d77/stable/jenkins/templates/jenkins-master-networkpolicy.yaml#L27
                    - key: "jenkins/jenkins-infra-agent"
                      value: "true"
                  templates:
                    - name: jnlp
                      nodeSelector: "kubernetes.io/os=linux"
                      containers:
                        - name: jnlp
                          image: "jenkins/inbound-agent:latest-jdk11"
                          resourceLimitCpu: "500m"
                          resourceLimitMemory: "512Mi"
                          resourceRequestCpu: "500m"
                          resourceRequestMemory: "512Mi"
                          args: "1d"
                          alwaysPullImage: true
                    - name: jnlp-windows
                      nodeSelector: "kubernetes.io/os=windows"
                      containers:
                        - name: jnlp
                          image: "jenkins/inbound-agent:windowsservercore-1809"
                          resourceLimitCpu: "500m"
                          resourceLimitMemory: "512Mi"
                          resourceRequestCpu: "500m"
                          resourceRequestMemory: "512Mi"
                          args: "1d"
                          alwaysPullImage: true
                      yaml: |-
                        spec:
                          tolerations:
                          - key: "os"
                            operator: "Equal"
                            value: "windows"
                            effect: "NoSchedule"
              - amazonEC2:
                  cloudName: "aws-us-east-2"
                  credentialsId: "ec2-agents-credentials"
                  instanceCapStr: "20"
                  noDelayProvisioning: true
                  region: "us-east-2"
                  sshKeysCredentialsId: "ec2-agents-privkey"
                  useInstanceProfileForCredentials: false
                  templates:
                    - ami: "ami-091f656c070b5741f" # https://github.com/jenkins-infra/packer-images/blob/master/aws/ubuntu-18-agent.arm64.json
                      amiOwners: "200564066411"
                      amiType:
                        unixData:
                          sshPort: "22"
                      associatePublicIp: true
                      connectBySSHProcess: false
                      connectionStrategy: PUBLIC_IP
                      deleteRootOnTermination: true
                      description: "ARM64 Ubuntu 18.04"
                      ebsOptimized: false
                      hostKeyVerificationStrategy: ACCEPT_NEW
                      idleTerminationMinutes: "5"
                      instanceCapStr: "10"
                      labelString: "arm64 linux-arm64 linux-arm64-docker"
                      launchTimeoutStr: "180"
                      maxTotalUses: 1
                      minimumNumberOfInstances: 0
                      minimumNumberOfSpareInstances: 0
                      mode: EXCLUSIVE
                      monitoring: true
                      numExecutors: 1
                      remoteAdmin: "jenkins"
                      remoteFS: "/home/jenkins"
                      securityGroups: "ec2_agents_infraci"
                      stopOnTerminate: false
                      t2Unlimited: false
                      tags:
                      - name: "architecture"
                        value: "arm64"
                      - name: "os"
                        value: "linux"
                      - name: "jenkins"
                        value: "infra.ci.jenkins.io"
                      type: T4gMedium
                      useDedicatedTenancy: false
                      useEphemeralDevices: true
                    - ami: "ami-03233867ef33df3bc" # https://github.com/jenkins-infra/packer-images/blob/master/aws/windows-2019-agent.amd64.json
                      amiOwners: "200564066411"
                      amiType:
                        unixData:
                          sshPort: "22"
                      associatePublicIp: true
                      connectBySSHProcess: false
                      connectionStrategy: PUBLIC_IP
                      deleteRootOnTermination: true
                      description: "Windows 2019 AMD64"
                      ebsOptimized: false
                      hostKeyVerificationStrategy: ACCEPT_NEW
                      idleTerminationMinutes: "5"
                      instanceCapStr: "10"
                      labelString: "windows windows-amd64 windows-amd64-docker"
                      launchTimeoutStr: "180"
                      maxTotalUses: 1
                      minimumNumberOfInstances: 0
                      minimumNumberOfSpareInstances: 0
                      mode: EXCLUSIVE
                      monitoring: true
                      numExecutors: 1
                      remoteAdmin: "Administrator"
                      remoteFS: "C:\\Jenkins"
                      securityGroups: "ec2_agents_infraci"
                      stopOnTerminate: false
                      t2Unlimited: false
                      tags:
                      - name: "architecture"
                        value: "amd64"
                      - name: "os"
                        value: "windows"
                      - name: "jenkins"
                        value: "infra.ci.jenkins.io"
                      type: T3Medium
                      useDedicatedTenancy: false
                      useEphemeralDevices: true
        jobs-settings: |
          jobs:
            - script: >
                multibranchPipelineJob('k8smgmt') {
                  displayName "K8s Cluster Management"
                  description "Current K8s Cluster Management"
                  branchSources {
                    github {
                      id('2019081602')
                      scanCredentialsId('github-app-infra')
                      repoOwner('jenkins-infra')
                      repository('charts')
                    }
                  }
                  factory {
                    workflowBranchProjectFactory {
                      scriptPath('Jenkinsfile_k8s')
                    }
                  }
                  configure { node ->
                    def traits = node / 'sources' / 'data' / 'jenkins.branch.BranchSource' / 'source' / 'traits'
                    traits << 'org.jenkinsci.plugins.github__branch__source.BranchDiscoveryTrait' {
                      strategyId(1)
                    }
                    traits << 'org.jenkinsci.plugins.github__branch__source.OriginPullRequestDiscoveryTrait' {
                      strategyId(1)
                    }
                    traits << 'org.jenkinsci.plugins.github__branch__source.ForkPullRequestDiscoveryTrait' {
                      strategyId(1)
                      trust(class: 'org.jenkinsci.plugins.github_branch_source.ForkPullRequestDiscoveryTrait$TrustPermission')
                    }
                    traits << 'jenkins.scm.impl.trait.WildcardSCMHeadFilterTrait' {
                      includes('main master PR-*')
                      excludes()
                    }
                    traits << 'org.jenkinsci.plugins.github.label.filter.PullRequestLabelsBlackListFilterTrait' {
                      labels('on-hold ci-skip')
                    }
                  }
                }
            - script: >
                multibranchPipelineJob('plugin-site') {
                  displayName "Plugin Site"
                  branchSources {
                    github {
                      id('2019081602')
                      scanCredentialsId('github-app-infra')
                      repoOwner('jenkins-infra')
                      repository('plugin-site')
                      includes('master')
                    }
                  }
                  factory {
                    workflowBranchProjectFactory {
                      scriptPath('Jenkinsfile_k8s')
                    }
                  }
                }
            - script: >
                organizationFolder('Docker Builds') {
                  description('Docker Builds')
                  displayName('Docker Builds')
                  organizations {
                    github {
                      repoOwner("jenkins-infra")
                      apiUri("https://api.github.com")
                      credentialsId('github-app-infra')

                      traits {
                        gitHubTagDiscovery()
                        cloneOptionTrait {
                          extension {
                            shallow(false)
                            noTags(false)
                            reference('')
                            timeout(10)
                            honorRefspec(true)
                          }
                        }
                      }
                    }
                  }

                  orphanedItemStrategy {
                    discardOldItems {
                      daysToKeep(7)
                      numToKeep(10)
                    }
                  }

                  projectFactories {
                    workflowMultiBranchProjectFactory {
                      scriptPath('Jenkinsfile_k8s')
                    }
                  }

                  buildStrategies {
                    buildAnyBranches {
                      strategies {
                        buildChangeRequests {
                          ignoreTargetOnlyChanges(true)
                          ignoreUntrustedChanges(true)
                        }
                        buildRegularBranches()
                        buildTags {
                          atLeastDays("0")
                          atMostDays("7")
                        }
                      }
                    }
                  }

                  configure { node ->
                    def traits = node / navigators / 'org.jenkinsci.plugins.github__branch__source.GitHubSCMNavigator' / traits
                    traits << 'jenkins.scm.impl.trait.RegexSCMSourceFilterTrait' {
                      regex('docker-.*|^jenkins.io$')
                    }
                    traits << 'org.jenkinsci.plugins.github__branch__source.BranchDiscoveryTrait' {
                      strategyId(1)
                    }
                    traits << 'org.jenkinsci.plugins.github__branch__source.OriginPullRequestDiscoveryTrait' {
                      strategyId(1)
                    }
                    traits << 'org.jenkinsci.plugins.github__branch__source.ForkPullRequestDiscoveryTrait' {
                      strategyId(1)
                      trust(class: 'org.jenkinsci.plugins.github_branch_source.ForkPullRequestDiscoveryTrait$TrustPermission')
                    }
                    traits << 'org.jenkinsci.plugins.github__branch__source.ExcludeArchivedRepositoriesTrait' {
                    }
                    traits << 'net.gleske.scmfilter.impl.trait.WildcardSCMHeadFilterTrait' {
                      includes('main master PR-*')
                      excludes()
                      tagIncludes('*')
                      tagExcludes()
                    }
                    traits << 'org.jenkinsci.plugins.github.label.filter.PullRequestLabelsBlackListFilterTrait' {
                      labels('on-hold ci-skip')
                    }
                  }
                }
            - script: >
                multibranchPipelineJob('aws') {
                  displayName "AWS Infra"
                  branchSources {
                    github {
                      id('2020120401')
                      scanCredentialsId('github-app-infra')
                      repoOwner('jenkins-infra')
                      repository('aws')
                    }
                  }
                  factory {
                    workflowBranchProjectFactory {
                      scriptPath('Jenkinsfile_k8s')
                    }
                  }
                }
            - script: >
                [
                  ['jenkins-infra', 'jenkins-wiki-exporter', 'Wiki Exporter'],
                  ['jenkinsci', 'custom-distribution-service', 'Custom Distribution Service'],
                  ['jenkins-infra', 'incrementals-publisher', 'Incrementals Publisher'],
                ].each { config ->
                  multibranchPipelineJob(config[1]) {
                    displayName config[2]
                    triggers {
                      pollSCM {
                        // poll every two hours until hooks are setup
                        scmpoll_spec('H/2 * * * *')
                      }
                    }
                    branchSources {
                      branchSource {
                        source {
                          github {
                            credentialsId("github-app-infra")
                            configuredByUrl(true)
                            repositoryUrl('https://github.com/' + config[0] + '/' + config[1])
                            repoOwner(config[0])
                            repository(config[1])
                            traits {
                              gitHubBranchDiscovery {
                                strategyId(1) // 1-only branches that are not pull requests
                              }
                              pruneStaleBranchTrait()
                              gitHubTagDiscovery()
                            }
                          }
                          buildStrategies {
                            buildAnyBranches {
                              strategies {
                                buildAllBranches {
                                  strategies {
                                    buildNamedBranches {
                                      filters {
                                        exact {
                                          name("master")
                                          caseSensitive(true)
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                            buildAnyBranches {
                              strategies {
                                buildAllBranches {
                                  strategies {
                                    buildTags {
                                      atLeastDays '-1'
                                      atMostDays '3'
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                    factory {
                      workflowBranchProjectFactory {
                        scriptPath('Jenkinsfile')
                      }
                    }
                  }
                }
        ldap-settings: |
          jenkins:
            securityRealm:
              ldap:
                configurations:
                  - server: "${LDAP_SERVER}"
                    rootDN: "${LDAP_ROOT_DN}"
                    managerDN: "${LDAP_MANAGER_DN}"
                    managerPasswordSecret: "${LDAP_MANAGER_PASSWORD}"
                    mailAddressAttributeName: "mail"
                    userSearch: cn={0}
                    userSearchBase: "ou=people"
                    groupSearchBase: "ou=groups"
                disableMailAddressResolver: false
                groupIdStrategy: "caseInsensitive"
                userIdStrategy: "caseInsensitive"
                cache:
                  size: 100
                  ttl: 300
        advisor-settings: |
          jenkins:
            disabledAdministrativeMonitors:
              - com.cloudbees.jenkins.plugins.advisor.Reminder
          advisor:
            acceptToS: true
            ccs:
            - "damien.duportal@gmail.com"
            email: "jenkins@oblak.com"
            excludedComponents:
              - "ItemsContent"
              - "GCLogs"
              - "Agents"
              - "RootCAs"
              - "SlaveLogs"
              - "HeapUsageHistogram"
            nagDisabled: true
        pipeline-library: |
          unclassified:
            globalLibraries:
              libraries:
              - defaultVersion: "master"
                implicit: true
                name: "pipeline-library"
                retriever:
                  modernSCM:
                    scm:
                      git:
                        id: "github-app-infra"
                        remote: "https://github.com/jenkins-infra/pipeline-library.git"
        matrix-settings: |
          jenkins:
            authorizationStrategy:
              globalMatrix:
                permissions:
                  - "Overall/Administer:admins"
                  - "Overall/SystemRead:authenticated"
                  - "Overall/Read:authenticated"
                  - "Job/Read:authenticated"
                  - "Job/Build:authenticated"
                  - "Job/ExtendedRead:authenticated"
        system-settings: |
          jenkins:
            disabledAdministrativeMonitors:
              - "jenkins.security.QueueItemAuthenticatorMonitor"
    sidecars:
      configAutoReload:
        env:
          # https://github.com/kiwigrid/k8s-sidecar#configuration-environment-variables
          - name: METHOD
            # Polling mode (instead of watching kube API)
            value: "SLEEP"
          # https://github.com/kiwigrid/k8s-sidecar#configuration-environment-variables
          - name: SLEEP_TIME
            # Time in seconds between two polls
            value: "60"
    installPlugins: false
    ingress:
      enabled: true
      hostName: infra.ci.jenkins.io
      annotations:
        "cert-manager.io/cluster-issuer": "letsencrypt-prod"
        "kubernetes.io/ingress.class": "nginx"
        "nginx.ingress.kubernetes.io/proxy-body-size": "500m"
      tls:
        - hosts:
            - infra.ci.jenkins.io
          secretName: infra.ci.jenkins.io-cert
    secondaryingress:
      enabled: true
      paths:
        - /github-webhook
      hostName: infra-webhooks.ci.jenkins.io
      annotations:
        "cert-manager.io/cluster-issuer": "letsencrypt-prod"
        "kubernetes.io/ingress.class": "public-ingress"
        "nginx.ingress.kubernetes.io/hsts": "true"
        "nginx.ingress.kubernetes.io/ssl-redirect": "true"
      tls:
        - hosts:
            - infra-webhooks.ci.jenkins.io
          secretName: infra-webhooks.ci.jenkins.io-cert
