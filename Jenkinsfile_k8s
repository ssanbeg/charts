pipeline {
  agent {
    kubernetes {
      label 'helmfile'
      yamlFile 'PodTemplates.yaml'
      inheritFrom 'jnlp-linux'
    }
  }
  environment {
    AZURE_TENANT_ID       = credentials('sops-tenant-id')
    AZURE_CLIENT_ID       = credentials('sops-client-id')
    AZURE_CLIENT_SECRET   = credentials('sops-client-secret')
  }

  options {
    buildDiscarder(logRotator(numToKeepStr: '10'))
    timeout(time: 30, unit: 'MINUTES')
    disableConcurrentBuilds()
  }

  triggers {
    cron(env.BRANCH_NAME == 'master' ? 'H/30 * * * *' : '')
  }

  stages {
    stage('Yaml Lint') {
      steps {
        container('yamllint') {
          sh 'yamllint --config-file yamllint.config config/'
        }
      }
    }
    stage('Init Secrets') {
      steps {
        container('jnlp') {
          dir ('secrets'){
            git branch: 'master', credentialsId: 'charts-secrets', url: 'git@github.com:jenkins-infra/charts-secrets.git'
          }
        }
      }
    }
    stage('Check Configuration Update') {
      when {
        allOf {
          branch 'master'
          // Only run updateCli's tasks when the pipeline is triggered by the "cron" routine
          triggeredBy 'TimerTrigger'
        }
      }
      environment {
        UPDATECLI_GITHUB_TOKEN  = credentials('updatecli-github-token')
      }
      steps {
        container('updatecli') {
          sh 'updatecli diff --config ./updateCli/updateCli.d --values ./updateCli/values.yaml'
        }
      }
    }
    stage('Apply Configuration Update') {
      when {
        allOf {
          branch 'master'
          // Only run updateCli's tasks when the pipeline is triggered by the "cron" routine
          triggeredBy 'TimerTrigger'
        }
      }
      environment {
        UPDATECLI_GITHUB_TOKEN  = credentials('updatecli-github-token')
      }
      steps {
        container('updatecli') {
          sh 'updatecli apply --config ./updateCli/updateCli.d --values ./updateCli/values.yaml'
        }
      }
    }
    stage('Prepare Environment'){
      steps {
        container('helmfile'){
          sh 'mkdir -p $HOME $HOME/.config'
        }
      }
    }
    stage('Test Lint'){
      steps {
        container('helmfile'){
          sh 'helmfile -f clusters/publick8s.yaml lint'
        }
      }
    }
    stage('Diff on Main Branch'){
      when { branch 'master' }
      steps {
        container('helmfile'){
          sh 'helmfile -f clusters/publick8s.yaml diff --suppress-secrets'
        }
      }
    }
    stage('Diff on PR'){
      when { changeRequest() }
      steps {
        container('helmfile'){
          script {
            def diff = sh(script:'helmfile --no-color -f clusters/publick8s.yaml diff --suppress-secrets --skip-deps', returnStdout: true).trim()
            pullRequest.comment('```\n' + diff)
          }
        }
      }
    }
    stage('Apply'){
      when { branch 'master' }
      steps {
        container('helmfile'){
          sh 'helmfile -f clusters/publick8s.yaml apply --suppress-secrets'
        }
      }
    }
  }
}
